@import "../data/pseudo";

@mixin setCustomProperty($setting) {
	:root {
		--coat-#{$setting}: #{map-get($coat, $setting)};
	}
}
// Function: coat-setting-exists
// Check if a Key exists in the settings
@function coat-setting-exists($setting) {
	@if map-get($coat-settings, $setting) {
		@return true;
	}
	@return false;
}
// Function: coat
// Get the value of a certain key in the settings and convert it to
// a custom property with default value or if empty just the custom property.
@function coat($setting, $prop: "", $modifier: "") {
	@if $prop != "" {
		$prop: "__#{$prop}";
	}
	@if $modifier != "" {
		$modifier: "--#{$prop}";
	}

	$key: #{$setting}#{$prop}#{$modifier};

	@if coat-setting-exists($key) {
		$value: map-get($coat-settings, $key);
		@if (str-index($key, "font-family")) {
			@return #{$value};
		} @else {
			@return unquote("var(--coat-#{$key},#{$value})");
		}
	}
	@return unquote("var(--coat-#{$setting})");
}
// Mixin: coat
// Get the setting value and check if it exists. If it exists, add the property.

@mixin coat($setting, $prop: "", $modifier: "") {
	$prop-partial: "";
	$modifier-partial: "";
	@if $prop != "" {
		$prop-partial: "__#{$prop}";
	}
	@if $modifier != "" {
		$modifier-partial: "--#{$modifier}";
	}

	$key: #{$setting}#{$prop-partial}#{$modifier-partial};

	// @debug "#{$key} ::: #{coat-setting-exists($key)} :: #{coat($key)}";
	@if coat-setting-exists($key) {
		#{$prop}: coat($key);
	}
}

// Mixin: coats
// List functionality for `mixin coat`. To do multiple properties at a time.
@mixin coats($props, $setting, $modifier: "") {
	@each $prop in $props {
		@include coat($setting, $prop, $modifier);
	}
}

// Is the modifier correct?
@function modifier-is($setting, $modifier) {
	@if $modifier == "" {
		@if str-index($setting, "--") {
			@return false;
		}
		@return true;
	}
	@if str-index($setting, "--#{$modifier}") {
		@return true;
	} @else {
		@return false;
	}
}
// Get the property from a string.
@function get-prop($setting) {
	@if str-index($setting, "__") {
		$start: str-index($setting, "__");
		$end: str-length($setting);
		@if str-index($setting, "--") {
			$end: str-index($setting, "--") - 1;
		}
		@return str-slice($setting, $start + 2, $end);
	} @else {
		@return null;
	}
}
@function get-modifier($setting) {
	@if str-index($setting, "--") {
		$start: str-index($setting, "--");
		$end: str-length($setting);
		@return str-slice($setting, $start + 2, $end);
	} @else {
		@return null;
	}
}

// Mixin Coat-Auto
// Automatically find all properties link to a key and use them. @mixin coat-auto(
@mixin coat-auto($setting, $modifier: "") {
	@each $setting-key, $setting-value in $coat-settings {
		@if str-index($setting-key, $setting + "__") == 1 {
			$prop: get-prop($setting-key);
			$mod: get-modifier($setting-key);

			@if $mod == null {
				#{$prop}: coat($setting-key);
			} @else if $modifier != "" {
				#{$prop}: coat($setting-key, $prop, $modifier);
			}
			@if $prop !=
				null and
				$mod !=
				null or
				$prop !=
				"" and
				$setting-value and
				$mod !=
				null
			{
				// If the modifier isn't set. Or $mod is nothing, just set the value;

				// Otherwise, automatically create the css.
				// If the pseudo is just a single, automatically apply it.
				@if index($pseudo, $mod) {
					&:#{$mod} {
						#{$prop}: coat($setting-key);
					}
				}
				// If the modifier has a dash and is a pseudo element/class
				@else if
					str-index($mod, "-") and
					index($pseudo, nth(str-split($mod, "-"), 1))
				{
					$mods: "";
					@each $m in str-split($mod, "-") {
						$mods: "#{$mods}:#{$m}";
					}
					&#{$mods} {
						#{$prop}: coat($setting-key);
					}
				} @else {
					@if $mod == "mobile" {
						@media #{$small} {
							#{$prop}: coat($setting-key);
						}
					} @else if $mod == "desktop" {
						@media #{$medium} {
							#{$prop}: coat($setting-key);
						}
					} @else {
						&--#{$mod} {
							#{$prop}: coat($setting-key);
						}
					}
				}
			}
		}
	}
}

@mixin coat-auto-responsive($setting, $modifier: "") {
	@include coat-auto($setting, $modifier);
	$mod: "";
	@if $modifier != "" {
		$mod: unquote(#{$mod}-);
	}
	@media #{$small} {
		@include coat-auto($setting, #{$mod}mobile);
	}
	@media #{$medium} {
		@include coat-auto($setting, #{$mod}desktop);
	}
}
